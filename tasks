#!/bin/bash

set -Eeuo pipefail

RELEASER_VERSION="2.1.0"
SECRET_OPS_VERSION="0.8.0"

SECRET_OPS_FILE="ops/secret-ops"
SECRET_OPS_TAR_FILE="ops/secret-ops-${SECRET_OPS_VERSION}.tar.gz"
RELEASER_FILE="ops/releaser-${RELEASER_VERSION}"

VAULT_ADDR="https://vault.kudulab.io:8200"

mkdir -p ops
if [[ ! -f $RELEASER_FILE ]];then
  wget --quiet -O $RELEASER_FILE https://github.com/kudulab/releaser/releases/download/${RELEASER_VERSION}/releaser
fi
source $RELEASER_FILE
if [[ ! -f $SECRET_OPS_TAR_FILE ]];then
  wget --quiet -O $SECRET_OPS_TAR_FILE https://github.com/kudulab/secret-ops/releases/download/${SECRET_OPS_VERSION}/secret-ops.tar.gz
  tar -xf $SECRET_OPS_TAR_FILE -C ops
fi
source $SECRET_OPS_FILE

command="$1"
case "${command}" in
  _build_test)
    gradle check assemble
    ;;
  build_test)
    dojo "./tasks _build_test"
    ;;
  set_version)
    set +u
    releaser::bump_changelog_version "$2" "$3"
    next_version=$(releaser::get_last_version_from_changelog "${changelog_file}")
    releaser::set_version_in_file "pluginVersion = " "build.gradle" "${next_version}"
    ;;
  bump)
    set +u
    releaser::bump_changelog_version "" true
    next_version=$(releaser::get_last_version_from_changelog "${changelog_file}")
    releaser::set_version_in_file "pluginVersion = " "build.gradle" "${next_version}"
    ;;
  verify_version)
    releaser::verify_release_ready
    ;;
  prepare_release)
    next_version=$(releaser::get_last_version_from_changelog "${changelog_file}")
    releaser::set_version_in_changelog "${changelog_file}" "${next_version}" false
    releaser::set_version_in_file "pluginVersion = " "build.gradle" "${next_version}"
    ;;
  commit)
    git add "${changelog_file}"
    git add "build.gradle"
    git commit --author "Tomasz Setkowski <tomasz.setkowski@thoughtworks.com>" -m "Version bump"
    ;;
  github_release)
    set +u
    if [[ -z "${GITHUB_TOKEN}" ]]; then
      echo "GITHUB_TOKEN must be set for release"
      if [[ -n "${VAULT_TOKEN}" ]]; then
        echo "Trying to get GITHUB_TOKEN from vault"
        GITHUB_TOKEN=$(vault read -field=token secret/openstack-elastic-agent/github)
        export GITHUB_TOKEN
      else
        exit 1
      fi
    fi
    releaser::prepare_github_release_bin

    VERSION=$(ls build/libs/gocd-elastic-agent-openstack-*.jar | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')

    changelog_version=$(releaser::get_last_version_from_changelog "${changelog_file}")
    if [ $changelog_version != $VERSION ]; then
      echo "changelog version $changelog_version does not match file version $VERSION"
      exit 2
    fi

    $GHRELEASE_BIN release \
      --user gocd-contrib \
      --repo openstack-elastic-agent \
      --tag $VERSION \
      --name $VERSION \
      --pre-release

    cd build/libs/
    for file in gocd-elastic-agent-openstack-*.jar*; do
      $GHRELEASE_BIN upload \
        --user gocd-contrib \
        --repo openstack-elastic-agent \
        --tag $VERSION \
        --name "$file" \
        --file "$file"
    done
    ;;
  generate_vault_token)
    vault_token=$(vault token create -orphan -ttl=168h -policy=openstack-elastic-agent -field token -metadata gocd_renew=true)
    secured_token_gocd=$(secret_ops::encrypt_with_gocd_top "${vault_token}")
    echo "Generated token: ${vault_token} and encrypted by GoCD server"
    secret_ops::insert_vault_token_gocd_yaml "${secured_token_gocd}"
    ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
